<?php

/**
 * Lumen Authors API
 * サンプルです.   You can findout more about Swagger at  [http://swagger.io](http://swagger.io) or on  [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: fendo181git@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class AuthorsApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation authorsGet
     *
     * Get all author by id.
     *
     *
     * @return Http response
     */
    public function authorsGet()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing authorsGet as a get method ?');
    }
    /**
     * Operation authorsPost
     *
     * Create an new author.
     *
     *
     * @return Http response
     */
    public function authorsPost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling authorsPost');
        }
        $body = $input['body'];


        return response('How about implementing authorsPost as a post method ?');
    }
    /**
     * Operation authorsIdDelete
     *
     * Delete author by id.
     *
     * @param string $id The name that needs to be deleted (required)
     *
     * @return Http response
     */
    public function authorsIdDelete($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing authorsIdDelete as a delete method ?');
    }
    /**
     * Operation authorsIdGet
     *
     * Get an author by id.
     *
     * @param string $id The id that needs to be fetched. (required)
     *
     * @return Http response
     */
    public function authorsIdGet($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing authorsIdGet as a get method ?');
    }
    /**
     * Operation authorsIdPut
     *
     * Updated author by id.
     *
     * @param string $id name that need to be updated (required)
     *
     * @return Http response
     */
    public function authorsIdPut($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing authorsIdPut as a put method ?');
    }
}
